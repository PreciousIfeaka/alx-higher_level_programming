====================================
The ``0-add_integer`` module and its use
===================================

This module adds two integers and returns an integer value

Other exceptions are checked


First ``import`` the ``add_integer`` function from the ``0-add_integer`` module:

	>>> add_integer = __import__('0-add_integer').add_integer

Now to use it in the following cases

=> When a, b are positive integers
	
	
	>>> add_integer(2, 1)
	3

	>>> add_integer(2, 17)
	19

=> When a or b is a negative integer

	>>> add_integer(-1, 3)
	2

	>>> add_integer(7, -14)
	-7

=> When a or b is of ``float`` type

	>>> add_integer(4.4, 2)
	6

	>>> add_integer(5, -3.3)
	2

=> When a and b are of ``float`` type

	>>> add_integer(2.0, 4.5)
	6

=> When a or b is of ``string`` type

	>>> add_integer("chess", 5)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(4.0, "chess")
	Traceback (most recent call last):
	TypeError: b must be an integer

=> When only one number is inputed, b assumes a value of ``98``

	>>> add_integer(4.3)
	102

=> When a or b is ``None``

	>>> add_integer(None, 3)
	Traceback (most recent call last):
	TypeError: a must be an integer
	
	>>> add_integer(7, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

=> When infinity is given as a parameter

	>>> add_integer(float('inf'))
    	Traceback (most recent call last):
    	OverflowError: cannot convert float infinity to integer
	
	>>> add_integer(5.0, float('inf'))
    	Traceback (most recent call last):
    	OverflowError: cannot convert float infinity to integer

=> When NaN are given

	>>> add_integer(float('nan'))
    	Traceback (most recent call last):
    	ValueError: cannot convert float NaN to integer

	>>> add_integer(2, float('nan'))
    	Traceback (most recent call last):
    	ValueError: cannot convert float NaN to integer
